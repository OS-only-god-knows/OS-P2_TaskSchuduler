
作者：何雨

2015/5/1:
1.创建版本库，提交源码

2015/5/2:
1.完成调试任务1-4;
2.调试任务5:在deq.c和stat.c的适当位置添加调试信息，实现“启动命令时可以在当前终端查看对应的cmdtype和owner信息”。
	在deq.c中增加调试代码如下：
	#ifdef DEBUG
	printf("deqcmd cmdtype\t%d\n"
		"deqcmd owner\t%d\n",
		deqcmd.type,deqcmd.owner);
	#endif
	在stat.c中增加调试代码如下：
	#ifdef DEBUG
	printf("statcmd cmdtype\t%d\n"
		"statcmd owner\t%d\n",
		statcmd.type,statcmd.owner);
	#endif
3.调试任务6:实现“查看updateall函数执行前后队列里所有进程的相关信息”。
	思路：可以借助已有的do_stat()函数帮助实现，减少代码量
	在job.c的updateall()函数中增加代码如下：
	#ifdef DEBUG
	struct jobcmd cmd;
	printf("before updateAll:\n");
	do_stat(cmd);
	#endif

	#ifdef DEBUG
	printf("after updateAll:\n");
	do_stat(cmd);
	#endif
4.调试任务7:实现“显示ENQ，DEQ，STAT命令执行前后的队列里所有进程的相关信息”。
	思路：实现方法与任务6类似，可以在scheduler()函数里面完成。
	在job.c的scheduler()函数中增加的代码如下：
	#ifdef DEBUG
	printf("before do_enq:\n");
	do_stat(cmd);
	#endif

	#ifdef DEBUG
	printf("after do_enq:\n");
	do_stat(cmd);
	#endif
	对DEQ，STAT命令的处理代码和ENQ类似，这里不再写出。
5.调试任务8:实现“显示jobselect函数选择的进程的信息”。
	在job.c的jobselect()函数中增加的代码如下：
	#ifdef DEBUG
	char timebuf[BUFLEN];
	#endif

	#ifdef DEBUG
	if(select==NULL)
	{
		printf("the select job is null!\n");
	}
	else
	{
		printf("the select job:\n");
		strcpy(timebuf,ctime(&(select->job->create_time)));
		timebuf[strlen(timebuf)-1]='\0';
		printf("jobid:%d\npid:%d\nowner:%d\nruntime:%d\nwaittime:%d\ncreattime:%s\nstate:%s\n",
			select->job->jid,
			select->job->pid,
			select->job->ownerid,
			select->job->run_time,
			select->job->wait_time,
			timebuf,"Ready");	
	}
	#endif
6.调试任务9:实现“显示jobswitch执行前后的正在执行的进程和等待队列中的分别的情况”。
	在job.c的scheduler()函数中增加的代码如下：
	#ifdef DEBUG
	printf("before jobselect:\n");
	do_stat(cmd);
	#endif

	#ifdef DEBUG
	printf("after jobselect:\n");
	do_stat(cmd);
	#endif
7.调试任务10:实现“显示当进程自己运行完成后发送SIGCHLD给sig_handler后的正在执行的进程和等待队列中的状态”。
	修改Demo.c，使其循环20次后结束。
	未完成~








